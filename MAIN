<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Test Anything</title>
  <style>
    :root {
      --bg: linear-gradient(135deg, #74ebd5, #acb6e5);
      --container-bg: #fff;
      --text: #333;
      --input-border: #ddd;
      --button-bg: #74ebd5;
      --button-hover: #5ac8c5;
      --item-bg: #f9f9f9;
    }

    body.dark {
      --bg: linear-gradient(135deg, #1f1f1f, #2c2c2c);
      --container-bg: #2e2e2e;
      --text: #f1f1f1;
      --input-border: #555;
      --button-bg: #444;
      --button-hover: #666;
      --item-bg: #3a3a3a;
    }

    body {
      font-family: "Poppins", sans-serif;
      background: var(--bg);
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      margin: 0;
      color: var(--text);
      transition: background 0.3s, color 0.3s;
    }

    .container {
      background: var(--container-bg);
      border-radius: 16px;
      box-shadow: 0 10px 25px rgba(0,0,0,0.1);
      padding: 2rem;
      width: 90%;
      max-width: 450px;
      text-align: center;
      overflow-y: auto;
      max-height: 90vh;
      transition: all 0.3s ease;
    }

    h1 {
      font-size: 1.8rem;
      margin-bottom: 1rem;
    }

    input {
      width: 80%;
      padding: 0.6rem;
      border: 2px solid var(--input-border);
      border-radius: 10px;
      margin-bottom: 1rem;
      font-size: 1rem;
      outline: none;
      background: transparent;
      color: var(--text);
      transition: border-color 0.3s, color 0.3s;
    }

    input:focus {
      border-color: var(--button-bg);
    }

    button {
      background: var(--button-bg);
      border: none;
      color: #fff;
      padding: 0.7rem 1.5rem;
      border-radius: 10px;
      font-size: 1rem;
      cursor: pointer;
      transition: background 0.3s;
      margin: 0.2rem;
    }

    button:hover {
      background: var(--button-hover);
    }

    .toggle {
      background: transparent;
      color: var(--text);
      border: 2px solid var(--input-border);
    }

    .result {
      margin-top: 1rem;
      font-size: 1.1rem;
      font-weight: 500;
    }

    .history {
      margin-top: 1.5rem;
      text-align: left;
      font-size: 0.95rem;
      border-top: 1px solid var(--input-border);
      padding-top: 1rem;
    }

    .history-item {
      margin-bottom: 0.6rem;
      background: var(--item-bg);
      padding: 0.5rem 0.8rem;
      border-radius: 8px;
      box-shadow: 0 2px 6px rgba(0,0,0,0.05);
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>ðŸ§ª Test Anything</h1>
    <input id="userInput" type="text" placeholder="Type something..." />
    <br />
    <button onclick="testInput()">Test It</button>
    <button onclick="clearHistory()">Clear History</button>
    <button class="toggle" onclick="toggleDarkMode()">ðŸŒ™ Toggle Dark Mode</button>
    <div class="result" id="result"></div>
    <div class="history" id="history"></div>
  </div>

  <script>
    let historyList = JSON.parse(localStorage.getItem("testHistory")) || [];
    const darkMode = localStorage.getItem("darkMode") === "true";

    if (darkMode) document.body.classList.add("dark");

    function testInput() {
      const input = document.getElementById("userInput").value.trim();
      const result = document.getElementById("result");
      const history = document.getElementById("history");

      if (!input) {
        result.textContent = "Please type something first!";
        return;
      }

      const reactions = [
        `Wow! "${input}" is absolutely legendary!`,
        `"${input}"? Thatâ€™s pure genius.`,
        `Hmmâ€¦ "${input}" sounds mysterious ðŸ¤”`,
        `I tested "${input}" â€” it passed with flying colors! ðŸŒˆ`,
        `"${input}" might just change the world.`,
        `The vibes from "${input}" are immaculate âœ¨`,
      ];

      const randomReaction = reactions[Math.floor(Math.random() * reactions.length)];
      result.textContent = randomReaction;

      historyList.unshift({ input, reaction: randomReaction });
      if (historyList.length > 20) historyList.pop();

      localStorage.setItem("testHistory", JSON.stringify(historyList));
      updateHistory(history);
    }

    function updateHistory(container) {
      if (historyList.length === 0) {
        container.innerHTML = "";
        return;
      }

      container.innerHTML = "<h3>ðŸ•“ Test History</h3>" +
        historyList
          .map(
            (item) =>
              `<div class="history-item"><strong>${item.input}</strong><br>${item.reaction}</div>`
          )
          .join("");
    }

    function clearHistory() {
      if (confirm("Clear all test history?")) {
        historyList = [];
        localStorage.removeItem("testHistory");
        updateHistory(document.getElementById("history"));
      }
    }

    function toggleDarkMode() {
      document.body.classList.toggle("dark");
      localStorage.setItem("darkMode", document.body.classList.contains("dark"));
    }

    // Render history on load
    updateHistory(document.getElementById("history"));
  </script>
</body>
</html>
